/**
 * @file Renders the results from the optimization service.
 * This component takes the route plan generated by the ORS Vroom API
 * and creates a clear, readable HTML representation for the dispatcher.
 */

/**
 * Formats duration in seconds to a human-readable string
 * @param {number} seconds - Duration in seconds
 * @returns {string} Formatted duration (e.g., "2h 30m", "45 min", "1h 5m")
 */
const formatDuration = (seconds) => {
    if (!seconds || seconds === 0) return '0 min';
    
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours === 0) {
        return `${minutes} min`;
    } else if (minutes === 0) {
        return `${hours}h`;
    } else {
        return `${hours}h ${minutes}m`;
    }
};

/**
 * Renders the optimized routes into the designated container.
 * @param {Array<object>} routes - The array of route objects from the optimization result.
 */
export const renderOptimizedRoutes = (routes) => {
    const container = document.getElementById('optimized-routes-container');
    if (!container) return;

    if (!routes || routes.length === 0) {
        container.innerHTML = `
            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-yellow-800">No Routes Generated</h3>
                        <p class="mt-1 text-sm text-yellow-700">
                            This could be because:
                            <br>‚Ä¢ No pending tasks available
                            <br>‚Ä¢ No vehicles available
                            <br>‚Ä¢ Tasks don't fit vehicle capacities
                            <br>‚Ä¢ Time windows conflict with vehicle schedules
                        </p>
                    </div>
                </div>
            </div>
        `;
        return;
    }

    // Calculate totals for summary
    const totalTasks = routes.reduce((sum, route) => 
        sum + route.steps.filter(step => step.type === 'job').length, 0);
    const totalDistance = routes.reduce((sum, route) => sum + (route.distance || 0), 0);
    const totalTime = routes.reduce((sum, route) => sum + (route.duration || 0), 0);

    const summaryHtml = `
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
            <h3 class="text-lg font-semibold text-blue-900 mb-2">üìä Optimization Summary</h3>
            <div class="grid grid-cols-3 gap-4 text-sm">
                <div class="text-center">
                    <div class="text-2xl font-bold text-blue-600">${totalTasks}</div>
                    <div class="text-blue-700">Tasks Assigned</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-blue-600">${(totalDistance / 1000).toFixed(1)} km</div>
                    <div class="text-blue-700">Total Distance</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-blue-600">${formatDuration(totalTime)}</div>
                    <div class="text-blue-700">Total Time</div>
                </div>
            </div>
        </div>
    `;

    const routesHtml = routes.map((route, routeIndex) => {
        const distanceInKm = (route.distance / 1000).toFixed(2);
        const durationInMinutes = (route.duration / 60).toFixed(0);
        const jobSteps = route.steps.filter(step => step.type === 'job');
        
        const stepsHtml = jobSteps.length > 0 
            ? jobSteps.map((step, index) => `
                <li class="flex items-center p-3 border-l-4 border-indigo-200 ml-4 mb-2 bg-gray-50 rounded-r">
                    <div class="flex-shrink-0 w-6 h-6 bg-indigo-500 text-white rounded-full flex items-center justify-center text-sm font-bold mr-3">
                        ${index + 1}
                    </div>
                    <div class="flex-grow">
                        <div class="font-semibold text-gray-900">
                            üì¶ Deliver to: ${step.description || step.customerName || step.customerId || `Customer ${index + 1}`}
                        </div>
                        <div class="text-sm text-gray-600">
                            üìä Volume: ${step.load && step.load[0] ? step.load[0] : (step.demandVolume || step.amount || 'N/A')} units
                        </div>
                    </div>
                </li>
            `).join('')
            : `<li class="p-3 text-gray-500 italic bg-gray-50 rounded ml-4">
                üö´ No deliveries assigned - Vehicle available as backup
               </li>`;

        const statusColor = jobSteps.length > 0 ? 'bg-green-100 text-green-800 border-green-200' : 'bg-gray-100 text-gray-600 border-gray-200';
        const statusText = jobSteps.length > 0 ? `${jobSteps.length} deliveries assigned` : 'Available (no tasks)';

        return `
            <div class="bg-white border border-gray-200 rounded-lg shadow-sm mb-4 overflow-hidden">
                <div class="bg-gradient-to-r from-indigo-600 to-indigo-700 text-white p-4">
                    <div class="flex justify-between items-center">
                        <div>
                            <h4 class="text-xl font-bold">üöê Vehicle: ${route.vehicle}</h4>
                            <div class="text-indigo-100 text-sm mt-1">Driver will receive this route automatically</div>
                        </div>
                        <div class="text-right">
                            <div class="text-2xl font-bold">${distanceInKm} km</div>
                            <div class="text-indigo-200 text-sm">${formatDuration(route.duration)}</div>
                        </div>
                    </div>
                </div>
                
                <div class="p-4">
                    <div class="flex items-center justify-between mb-3">
                        <span class="text-sm font-medium text-gray-700">Route Status:</span>
                        <span class="px-3 py-1 rounded-full text-sm border ${statusColor}">
                            ${statusText}
                        </span>
                    </div>
                    
                    <h5 class="font-semibold text-gray-800 mb-2">üìç Delivery Sequence:</h5>
                    <ul class="space-y-2">
                        ${stepsHtml}
                    </ul>
                    
                    ${jobSteps.length > 0 ? `
                        <div class="mt-4 p-3 bg-blue-50 rounded border-l-4 border-blue-400">
                            <p class="text-sm text-blue-800">
                                <strong>Next Steps:</strong> This route has been automatically saved and assigned to the driver. 
                                The driver can log in to see their tasks and start location tracking.
                            </p>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;
    }).join('');

    container.innerHTML = summaryHtml + routesHtml;
};

