/**
 * @file This file contains JSDoc type definitions for the core data models
 * used throughout the application. It provides a schema-like reference for
 * objects stored in and retrieved from Firestore.
 */

/**
 * Represents a single delivery or pickup task.
 * @typedef {object} Task
 * @property {string} id - The unique ID of the task (Firestore document ID).
 * @property {string} customerId - The name or ID of the customer.
 * @property {string} deliveryAddress - The full address for the delivery.
 * @property {import("firebase/firestore").GeoPoint} location - The geographic coordinates for the task location.
 * @property {number} demandVolume - The volume of the goods (e.g., in cubic meters or units).
 * @property {import("firebase/firestore").Timestamp} timeWindowStart - The earliest time the task can be performed.
 * @property {import("firebase/firestore").Timestamp} timeWindowEnd - The latest time the task must be completed (the deadline).
 * @property {'pending' | 'assigned' | 'completed' | 'failed'} status - The current status of the task.
 * @property {string} [assignedVehicle] - The ID of the vehicle this task is assigned to.
 */

/**
 * Represents a single vehicle in the fleet.
 * @typedef {object} Vehicle
 * @property {string} id - The unique ID of the vehicle (Firestore document ID, e.g., "VAN-01").
 * @property {string} driverName - The name of the assigned driver.
 * @property {string} driverEmail - The email of the assigned driver, used for login and route assignment.
 * @property {number} maxCapacity - The maximum load volume the vehicle can carry.
 * @property {import("firebase/firestore").GeoPoint} startLocation - The starting point for the vehicle's shift.
 * @property {import("firebase/firestore").GeoPoint} liveLocation - The real-time GPS coordinates of the vehicle.
 * @property {'idle' | 'en-route' | 'on-break'} liveStatus - The current operational status of the vehicle.
 * @property {import("firebase/firestore").Timestamp} shiftStart - The start time of the vehicle's operational window.
 * @property {import("firebase/firestore").Timestamp} shiftEnd - The end time of the vehicle's operational window.
 */

/**
 * Represents an optimized route for a single vehicle, generated by the ORS Vroom API.
 * @typedef {object} Route
 * @property {string} vehicle - The ID of the vehicle assigned to this route.
 * @property {number} cost - The total cost or distance of the route.
 * @property {number} duration - The total duration of the route in seconds.
 * @property {Array<object>} steps - The sequence of stops (tasks) for the vehicle to follow.
 */

/**
 * Represents a log of a completed or historical trip, used for analytics.
 * @typedef {object} TripLog
 * @property {string} id - The unique ID of the trip log.
 * @property {string} vehicleId - The ID of the vehicle that performed the trip.
 * @property {Array<string>} completedTasks - An array of task IDs that were part of this trip.
 * @property {number} plannedDuration - The initially planned duration in seconds.
 * @property {number} actualDuration - The actual time taken in seconds.
 * @property {number} distance - The total distance covered in kilometers.
 * @property {number} fuelConsumed - The total fuel consumed in liters.
 * @property {number} totalCost - The calculated total cost of the trip.
 * @property {boolean} isOTD - Flag indicating if the primary deliveries were on-time.
 * @property {import("firebase/firestore").Timestamp} tripDate - The date the trip was performed.
 */

